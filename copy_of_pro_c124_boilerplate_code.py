# -*- coding: utf-8 -*-
"""Copy of PRO-C124-Boilerplate-code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G702g6HhIrBSQfj6L8dSnjo9PBIMzZGP

What is a **matrix**?

We know that is it the arrangement of numbers in tabular form. In Python, we use 2D lists or arrays to represent a matrix. A Matrix should always have a numerical value. 

1D list: It is the list with one row and many columns as shown.

2D list: It is the list of lists. It can have any number of rows and columns.
"""

# Method 1 to create a 1D and 2D list
A = [3,2,-1,9,5]
print(A)
B =[[1,-2,3],[8,4,6],[-6,5,3]]
print(B)

"""**NumPy** library provides different dedicated operations on arrays and provides faster operations on arrays. """

#Method to create a 1 D array using NumPy

import numpy as np

arr = np.array([1, 2, 3, 4, 5])
print(arr)
print(type(arr))

#Method-2 to create a 2D array using NumPy

arr_2d =np.array([[1,2,3],[4,5,6],[7,8,9]])
print(arr_2d)
type(arr_2d)

#Array with elements of different data types

arr_2d_1 =np.array([[1,2,3],['a',5,True],[7,8,9]])
print(arr_2d_1)
type(arr_2d_1)

"""Accessing elements of 2D lists and arrays"""

#Accessing elements of 1D list or array
print(A)
print(A[1])      
print(arr)   
print(arr[2])

#accessing elements of 2D array method1
print(arr_2d)
print(arr_2d[1,2])
#accessing elements of 2D array method2
print(arr_2d[0][1])

"""Updating elements of 2D Lists"""

#To update an element from 2D list/arrays
print(arr_2d)
print('----------------')
# method 1
arr_2d[1,2]=-4
print(arr_2d)
print('----------------')
# method 2
arr_2d[1,2]=8
print(arr_2d)

"""Add/Subtract elements of 2D lists"""

#Add Matrices
a = np.array([[1,3],
             [5,4]])
b= np.array([[7,8],[6,9]])
rows = 2
cols = 2
c = [[0,0],[0,0]]
for i in range(rows):
  for j in range(cols):
      c[i][j]=a[i][j]+b[i][j]
print(a,'\n')
print(b,'\n')
print(c)

#Scalar Multiplication
b =np.array([[2,-2],[0,5],[4,7]])
print(b,'\n')
n = 5
mul = np.zeros([3,2])
for i in range(3):
  for j in range(2):
      mul[i][j]=n*b[i][j]
  for rows in mul:
    print(rows)

n = 5
arr1 = np.array([1,2,3])
arr2 = np.multiply(arr1,n)
print(arr2)

print('------------------------------------------------')
arr3 = np.array([[1,2],[3,4]])
arr4 = np.multiply(arr,n)
print(arr4)

print('------------------------------------------------')
print(a)
e = np.multiply(a,n)
print(e)

a= np.array([[2,3,-4],[6,1,0],[8,9,3]])
b = np.array([[2,-2],[0,5],[4,7]])
c = np.zeros([3,2])
print(c,'\n')
rows_a  =3
cols_a = rows_b =2
cols_b = 3
for i in range(3):
    for j in range(2):
        for k in range(3):
            c[i][j]=c[i][j]+a[i][k]*b[k][j]
for rows in c:
    print(rows)